options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: top_block
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 11]
    rotation: 0
    state: enabled

blocks:
- name: angle
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-90'
    step: '45'
    stop: '90'
    value: '-90'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 1316.0]
    rotation: 0
    state: disabled
- name: angle
  id: variable
  parameters:
    comment: ''
    value: python_mod.sweeper(fun_prob)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 1148.0]
    rotation: 0
    state: disabled
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: '945000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 20.0]
    rotation: 0
    state: true
- name: chooser
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: '(0, 1, 1, 5) '
    label: Choose State
    label0: Rx cal
    label1: AoA Estimation
    label2: Beamsteering
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '2'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QHBoxLayout
    type: int
    value: '0'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 484.0]
    rotation: 0
    state: true
- name: fun_prob
  id: variable_function_probe
  parameters:
    block_id: probSign
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '10'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 1164.0]
    rotation: 0
    state: disabled
- name: gain
  id: variable
  parameters:
    comment: ''
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 12.0]
    rotation: 0
    state: true
- name: payload_len
  id: variable
  parameters:
    comment: ''
    value: '65000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 12.0]
    rotation: 0
    state: true
- name: push_button
  id: variable_qtgui_toggle_button_msg
  parameters:
    comment: ''
    gui_hint: ''
    initPressed: 'False'
    label: ''
    outputmsgname: value
    pressBackgroundColor: default
    pressFontColor: default
    pressed: '1'
    relBackgroundColor: default
    relFontColor: default
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1244.0]
    rotation: 0
    state: disabled
- name: push_button
  id: variable_qtgui_toggle_button_msg
  parameters:
    comment: ''
    gui_hint: ''
    initPressed: 'False'
    label: ''
    outputmsgname: value
    pressBackgroundColor: default
    pressFontColor: default
    pressed: '1'
    relBackgroundColor: default
    relFontColor: default
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 1340.0]
    rotation: 0
    state: disabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '125000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '0.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SQR_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1332.0]
    rotation: 0
    state: disabled
- name: ang
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '180'
    min: '-180'
    name: '"Angle"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 1100.0]
    rotation: 0
    state: disabled
- name: blocks_complex_to_real_0_0_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 208.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_0_0_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 80.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_0_0_1
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 560.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_1_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 176.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_1_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 48.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_1_1
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 528.0]
    rotation: 0
    state: enabled
- name: blocks_copy_0_0
  id: blocks_copy
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: push_button
    maxoutbuf: '0'
    minoutbuf: '0'
    showports: 'False'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 1044.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: beam_trace
    type: float
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 1028.0]
    rotation: 0
    state: disabled
- name: blocks_float_to_complex_0_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 1560.0]
    rotation: 0
    state: disabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    num_outputs: '2'
    output_index: chooser
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 284.0]
    rotation: 0
    state: true
- name: blocks_stream_demux_0
  id: blocks_stream_demux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 240.0]
    rotation: 0
    state: true
- name: blocks_stream_demux_0_0
  id: blocks_stream_demux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 432.0]
    rotation: 0
    state: true
- name: blocks_stream_mux_0
  id: blocks_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 1032.0]
    rotation: 0
    state: disabled
- name: blocks_stream_mux_0_0
  id: blocks_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengths: (1, 1)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 304.0]
    rotation: 0
    state: true
- name: blocks_uchar_to_float_0_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 1560.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, angle=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=[np.float32, np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.angle\
      \ = angle\n\n    def work(self, input_items, output_items):\n        \"\"\"\
      example: multiply with constant\"\"\"\n        output_items[0][:] = input_items[0]\n\
      \        output_items[1][:] = self.angle\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    angle: angle
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('angle', '1.0')], [('0', 'float',
      1)], [('0', 'float', 1), ('1', 'float', 1)], 'Embedded Python Block example
      - a simple multiply const', ['angle'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 1032.0]
    rotation: 0
    state: disabled
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, num_samples_to_process\
      \ = 10000, threshold = 0.01):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='SiMo AoA Calculation',   # will show up\
      \ in GRC\n            in_sig=[np.complex64,np.complex64],\n            out_sig=[np.float32]\n\
      \        )\n        self.num_samples_to_count = num_samples_to_process\n   \
      \     self.set_output_multiple(self.num_samples_to_count)\n        self.threshold\
      \ = threshold\n\n    def work(self, input_items, output_items):\n        \"\"\
      \"example: multiply with constant\"\"\"\n        angles = np.arange(-np.pi,np.pi,np.pi/180)\n\
      \        sum = []\n        \n        in0 = input_items[0][:100]\n        in1\
      \ = input_items[1][:100]\n\n        if np.mean(np.abs(in0)) > self.threshold\
      \ :\n            for theta in angles:\n                sum.append(np.mean(np.abs(in0\
      \ + in1 * np.exp(-1j*theta))))\n            \n            max_idx = np.argmax(sum)\n\
      \n            output_items[0][:] = np.degrees(angles[max_idx])\n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples_to_process: samp_rate*2
    threshold: '0.1'
  states:
    _io_cache: ('SiMo AoA Calculation', 'blk', [('num_samples_to_process', '10000'),
      ('threshold', '0.01')], [('0', 'complex', 1), ('1', 'complex', 1)], [('0', 'float',
      1)], 'Embedded Python Block example - a simple multiply const', ['threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 648.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, num_samples_to_process\
      \ = 10000, threshold = 0.01):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='PLLs phase shift detector',   # will show\
      \ up in GRC\n            in_sig=[np.complex64,np.complex64],\n            out_sig=[np.complex64,np.complex64,np.float32]\n\
      \        )\n        self.message_port_register_out(pmt.intern(\"phase_diff\"\
      ))\n        self.num_samples_to_count = num_samples_to_process\n        self.counter\
      \ = 0\n        self.set_output_multiple(self.num_samples_to_count)\n       \
      \ self.threshold = threshold\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # print(\"call\"\
      )\n        output_items[0][:] = input_items[0] \n        output_items[1][:]\
      \ = input_items[1]\n        \n        angles = np.arange(-np.pi,np.pi,np.pi/180)\n\
      \        sum = []\n        \n        in0 = input_items[0][:100]\n        in1\
      \ = input_items[1][:100]\n        if np.mean(np.abs(in0)) > self.threshold :\n\
      \            for theta in angles:\n                sum.append(np.mean(np.abs(in0\
      \ + in1 * np.exp(-1j*theta))))\n            \n            max_idx = np.argmax(sum)\n\
      \n            PMT_msg = pmt.from_float(angles[max_idx])\n            self.message_port_pub(pmt.intern(\"\
      phase_diff\"), PMT_msg)\n\n            output_items[2][:] = np.degrees(angles[max_idx])\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples_to_process: samp_rate*2
    threshold: '0.05'
  states:
    _io_cache: ('PLLs phase shift detector', 'blk', [('num_samples_to_process', '10000'),
      ('threshold', '0.01')], [('0', 'complex', 1), ('1', 'complex', 1)], [('0', 'complex',
      1), ('1', 'complex', 1), ('2', 'float', 1), ('phase_diff', 'message', 1)], 'Embedded
      Python Block example - a simple multiply const', ['threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 208.0]
    rotation: 0
    state: enabled
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self): \
      \ # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='ones',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    output_items[0][:] = (input_items[0] * 0 ) + 1\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('ones', 'blk', [], [('0', 'complex', 1)], [('0', 'complex', 1)], 'Embedded
      Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 1576.0]
    rotation: 0
    state: disabled
- name: epy_block_0_3_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\ndef NormalizeData(data):\n    return\
      \ (data - np.min(data)) / (np.max(data) - np.min(data))\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Phase Compensation',   # will show up in GRC\n\
      \            in_sig=[np.complex64, np.complex64],\n            out_sig=[np.complex64,\
      \ np.complex64]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      phase_diff\"))\n        self.set_msg_handler(pmt.intern(\"phase_diff\"), self.handle_msg)\n\
      \        self.phase_diff = 0\n        self.set_tag_propagation_policy(gr.TPP_ONE_TO_ONE)\n\
      \    \n    def handle_msg(self, msg):  \n        self.phase_diff = pmt.to_float(msg)\n\
      \        # print(self.phase_diff)\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0]\n        output_items[1][:] = input_items[1] * np.exp(-1j*self.phase_diff)\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Phase Compensation', 'blk', [], [('0', 'complex', 1), ('1', 'complex',
      1), ('phase_diff', 'message', 1)], [('0', 'complex', 1), ('1', 'complex', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 1576.0]
    rotation: 0
    state: disabled
- name: epy_block_0_3_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\ndef NormalizeData(data):\n    return\
      \ (data - np.min(data)) / (np.max(data) - np.min(data))\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Phase Compensation',   # will show up in GRC\n\
      \            in_sig=[np.complex64, np.complex64],\n            out_sig=[np.complex64,\
      \ np.complex64]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      phase_diff\"))\n        self.set_msg_handler(pmt.intern(\"phase_diff\"), self.handle_msg)\n\
      \        self.phase_diff = 0\n        self.set_tag_propagation_policy(gr.TPP_ONE_TO_ONE)\n\
      \    \n    def handle_msg(self, msg):  \n        self.phase_diff = pmt.to_float(msg)\n\
      \        # print(self.phase_diff)\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0]\n        output_items[1][:] = input_items[1] * np.exp(-1j*self.phase_diff)\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Phase Compensation', 'blk', [], [('0', 'complex', 1), ('1', 'complex',
      1), ('phase_diff', 'message', 1)], [('0', 'complex', 1), ('1', 'complex', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 600.0]
    rotation: 0
    state: enabled
- name: epy_block_0_3_0_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\ndef NormalizeData(data):\n    return\
      \ (data - np.min(data)) / (np.max(data) - np.min(data))\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Phase Compensation',   # will show up in GRC\n\
      \            in_sig=[np.complex64, np.complex64],\n            out_sig=[np.complex64,\
      \ np.complex64]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      phase_diff\"))\n        self.set_msg_handler(pmt.intern(\"phase_diff\"), self.handle_msg)\n\
      \        self.phase_diff = 0\n        self.set_tag_propagation_policy(gr.TPP_ONE_TO_ONE)\n\
      \    \n    def handle_msg(self, msg):  \n        self.phase_diff = pmt.to_float(msg)\n\
      \        # print(self.phase_diff)\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0]\n        output_items[1][:] = input_items[1] * np.exp(-1j*self.phase_diff)\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Phase Compensation', 'blk', [], [('0', 'complex', 1), ('1', 'complex',
      1), ('phase_diff', 'message', 1)], [('0', 'complex', 1), ('1', 'complex', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 32.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nDBS\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import\
      \ gr\nimport math\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, angle=0.0):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='DBS precoder',   # will show up in GRC\n            in_sig=[np.complex64,\
      \ np.complex64],\n            out_sig=[np.complex64, np.complex64]\n       \
      \ )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.angle\
      \ = angle  # [-90 -> 90]\n\n    def work(self, input_items, output_items):\n\
      \n        # self.F = np.transpose([np.exp(-1j*math.pi*math.sin(self.angle*math.pi/180)*np.arange(1,2+1))])\
      \ * (1/math.sqrt(2))\n        # x = [np.transpose(input_items[0])]\n       \
      \ # x_precoded = np.matmul(self.F, x)\n        # output_items[0][:] = x_precoded[0]\n\
      \        # output_items[1][:] = x_precoded[1]\n        output_items[0][:] =\
      \ input_items[0]\n        output_items[1][:] = input_items[1]*np.exp(1j*np.cos(self.angle*math.pi/180))\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    angle: angle
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('DBS precoder', 'blk', [('angle', '0.0')], [('0', 'complex', 1), ('1',
      'complex', 1)], [('0', 'complex', 1), ('1', 'complex', 1)], 'Embedded Python
      Block example - a simple multiply const', ['angle'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1352, 1592.0]
    rotation: 0
    state: disabled
- name: pdu_pdu_to_stream_x_0_0
  id: pdu_pdu_to_stream_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    depth: payload_len
    early_behavior: pdu.EARLY_BURST_APPEND
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 1556.0]
    rotation: 0
    state: disabled
- name: pdu_random_pdu_0_0_0
  id: pdu_random_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length_modulo: payload_len
    mask: '0x01'
    maxoutbuf: '0'
    maxsize: payload_len
    minoutbuf: '0'
    minsize: payload_len
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 1532.0]
    rotation: 0
    state: disabled
- name: probSign
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 1372.0]
    rotation: 0
    state: disabled
- name: pwr
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '100'
    min: '0'
    name: '"Power Received"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 1196.0]
    rotation: 0
    state: disabled
- name: python_mod
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\nan1=-180\n\
      an2=180\nangle = an1\n\nstep = 11.25\n\ndef sweeper(prob_lvl) : \n    global\
      \ an1,an2,angle, step\n    if prob_lvl :\n        angle += step\n\n    if angle\
      \ > an2 :\n        angle = an1\n\n    return angle"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 1220.0]
    rotation: 0
    state: disabled
- name: qtgui_compass_0
  id: qtgui_compass
  parameters:
    affinity: ''
    alias: ''
    backgroundColor: silver
    comment: ''
    fullNeedle: '2'
    gui_hint: '(5, 3, 2, 3) '
    min_size: '250'
    name: AoA Estimation
    needleBodyColor: black
    needleTipColor: red
    position: '1'
    scaleColor: black
    setDebug: 'False'
    update_time: '0.10'
    usemsg: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 652.0]
    rotation: 0
    state: true
- name: qtgui_edit_box_msg_0_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'True'
    key: pmt.intern("#t")
    label: Send DBS frame
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: pmt.intern("#t")
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1524.0]
    rotation: 0
    state: disabled
- name: qtgui_edit_box_msg_0_0_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: '(9, 0, 1, 3) '
    is_pair: 'False'
    is_static: 'True'
    key: pmt.intern("#t")
    label: Send Rx cal frame
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: pmt.intern("#t")
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 740.0]
    rotation: 0
    state: enabled
- name: qtgui_edit_box_msg_0_0_0_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: '(9, 3, 1, 3) '
    is_pair: 'False'
    is_static: 'True'
    key: pmt.intern("#t")
    label: Send frame
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: pmt.intern("#t")
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 860.0]
    rotation: 0
    state: enabled
- name: qtgui_ledindicator_0_0_1
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '1'
    comment: ''
    gui_hint: '(2,3, 1, 1) '
    label: '"AoA Estimation"'
    maxSize: '40'
    offColor: silver
    onColor: green
    position: '1'
    state: chooser == 1
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 548.0]
    rotation: 0
    state: true
- name: qtgui_ledindicator_0_1
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '1'
    comment: ''
    gui_hint: '(2, 0, 1, 1) '
    label: '"Rx Calibration"'
    maxSize: '40'
    offColor: silver
    onColor: green
    position: '1'
    state: chooser == 0
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 484.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0_0_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_NONE
    gui_hint: '(8, 0, 1, 3) '
    label1: 'Phase Shift :'
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '180'
    min: '-180'
    name: '"Phase Difference between USRPs Rx PLLs (degrees)"'
    nconnections: '1'
    type: float
    unit1: "\xB0"
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 284.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: '(3,3,2, 3) '
    label1: Ant 0
    label10: Signal 10
    label2: Ant 1
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Phase shift compensated, AoA estimation"'
    nconnections: '2'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 516.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '2.0'
    alpha10: '1.0'
    alpha2: '2.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: '(3, 0,2, 3) '
    label1: Ant 0
    label10: Signal 10
    label2: Ant 1
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Received signal"'
    nconnections: '2'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 172.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '2.0'
    alpha10: '1.0'
    alpha2: '2.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: '(5, 0, 2, 3) '
    label1: Ant 0
    label10: Signal 10
    label2: Ant 1
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Rx PLLs Calibrated"'
    nconnections: '2'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 44.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0_0_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: center_freq
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: gpsdo
    clock_source1: mimo
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '"addr0=192.168.10.3, addr1=192.168.10.2"'
    dev_args: ''
    gain0: gain
    gain1: gain
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '2'
    num_mboards: '2'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: mimo
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1552, 1500.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: center_freq
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: gpsdo
    clock_source1: mimo
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '"addr0=192.168.10.3, addr1=192.168.10.2"'
    dev_args: ''
    gain0: '9'
    gain1: '9'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '2'
    num_mboards: '2'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate*10
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: mimo
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 212.0]
    rotation: 0
    state: enabled
- name: zeromq_pull_source_0
  id: zeromq_pull_source
  parameters:
    address: tcp://10.10.8.27:5678
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 1028.0]
    rotation: 0
    state: disabled
- name: zeromq_push_msg_sink_0
  id: zeromq_push_msg_sink
  parameters:
    address: tcp://10.10.8.34:5678
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 788.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_1, '0', probSign, '0']
- [blocks_complex_to_real_0_0_0_0, '0', qtgui_time_sink_x_0_1, '1']
- [blocks_complex_to_real_0_0_0_0_0, '0', qtgui_time_sink_x_0_1_0, '1']
- [blocks_complex_to_real_0_0_0_1, '0', qtgui_time_sink_x_0_0, '1']
- [blocks_complex_to_real_0_1_0, '0', qtgui_time_sink_x_0_1, '0']
- [blocks_complex_to_real_0_1_0_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [blocks_complex_to_real_0_1_1, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_copy_0_0, '0', blocks_file_sink_0, '0']
- [blocks_float_to_complex_0_0, '0', epy_block_0_2, '0']
- [blocks_selector_0, '0', blocks_stream_demux_0, '0']
- [blocks_selector_0, '1', blocks_stream_demux_0_0, '0']
- [blocks_stream_demux_0, '0', epy_block_0_0_0_0, '0']
- [blocks_stream_demux_0, '1', epy_block_0_0_0_0, '1']
- [blocks_stream_demux_0_0, '0', epy_block_0_3_0_1, '0']
- [blocks_stream_demux_0_0, '1', epy_block_0_3_0_1, '1']
- [blocks_stream_mux_0, '0', blocks_copy_0_0, '0']
- [blocks_stream_mux_0_0, '0', blocks_selector_0, '0']
- [blocks_uchar_to_float_0_0, '0', blocks_float_to_complex_0_0, '0']
- [epy_block_0, '0', blocks_stream_mux_0, '0']
- [epy_block_0, '0', pwr, '0']
- [epy_block_0, '1', ang, '0']
- [epy_block_0, '1', blocks_stream_mux_0, '1']
- [epy_block_0_0_0, '0', qtgui_compass_0, '0']
- [epy_block_0_0_0_0, '0', blocks_complex_to_real_0_1_0, '0']
- [epy_block_0_0_0_0, '0', epy_block_0_3_0_1_0, '0']
- [epy_block_0_0_0_0, '1', blocks_complex_to_real_0_0_0_0, '0']
- [epy_block_0_0_0_0, '1', epy_block_0_3_0_1_0, '1']
- [epy_block_0_0_0_0, '2', qtgui_number_sink_0_0_0_0, '0']
- [epy_block_0_0_0_0, phase_diff, epy_block_0_3_0_1, phase_diff]
- [epy_block_0_0_0_0, phase_diff, epy_block_0_3_0_1_0, phase_diff]
- [epy_block_0_2, '0', epy_block_0_3_0_0, '0']
- [epy_block_0_2, '0', epy_block_0_3_0_0, '1']
- [epy_block_0_3_0_0, '0', epy_block_1, '0']
- [epy_block_0_3_0_0, '1', epy_block_1, '1']
- [epy_block_0_3_0_1, '0', blocks_complex_to_real_0_1_1, '0']
- [epy_block_0_3_0_1, '0', epy_block_0_0_0, '0']
- [epy_block_0_3_0_1, '1', blocks_complex_to_real_0_0_0_1, '0']
- [epy_block_0_3_0_1, '1', epy_block_0_0_0, '1']
- [epy_block_0_3_0_1_0, '0', blocks_complex_to_real_0_1_0_0, '0']
- [epy_block_0_3_0_1_0, '1', blocks_complex_to_real_0_0_0_0_0, '0']
- [epy_block_1, '0', uhd_usrp_sink_0_0_0, '0']
- [epy_block_1, '1', uhd_usrp_sink_0_0_0, '1']
- [pdu_pdu_to_stream_x_0_0, '0', blocks_uchar_to_float_0_0, '0']
- [pdu_random_pdu_0_0_0, pdus, pdu_pdu_to_stream_x_0_0, pdus]
- [qtgui_edit_box_msg_0_0, msg, pdu_random_pdu_0_0_0, generate]
- [qtgui_edit_box_msg_0_0_0, msg, zeromq_push_msg_sink_0, in]
- [qtgui_edit_box_msg_0_0_0_0, msg, zeromq_push_msg_sink_0, in]
- [uhd_usrp_source_0, '0', blocks_stream_mux_0_0, '0']
- [uhd_usrp_source_0, '1', blocks_stream_mux_0_0, '1']
- [zeromq_pull_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.2.0
